% This program is used to calculate the transfer entropy (both top-down
% and bottom-up) of the sampled population data.  
clear
clc
samples = 10;
epsvals = 10;
global TD_TE
global BU_TE
TD_TE = zeros(epsvals, 3*samples);
BU_TE = zeros(epsvals, 3*samples);


D = readmatrix('Data/TEdata/MX_0.0_1.csv');
TE = calcTE_Gaussian(D(:, 1), D(:, 2), 1);
storeTE(1, D);
for eps = 1:epsvals
    for sample = 1:samples
        filename = sprintf('Data/TEdata/MX_%d_%d.csv', eps-1, sample-1);
        if exist(filename, 'file')
            D = readmatrix(filename);
            storeTE(eps, sample, D);
        end
    end
    fprintf('Finished eps %d\n',eps);
end
csvwrite('TD_data.csv',TD_TE)
csvwrite('BU_data.csv',BU_TE)

function storeTE(eps, D)
    global TD_TE
    global BU_TE
    for i = 1:3
        TD_TE(eps, i) = calcTE_Gaussian(D(:,1),D(:,i+1), 1);
        BU_TE(eps, i) = calcTE_Gaussian(D(:,i+1),D(:,1), 1);
    end
end

% Code generated from JIDT 
function result = calcTE_Gaussian(v1, v2, k)
    % Add JIDT jar library to the path, and disable warnings that it's already there:
    warning('off','MATLAB:Java:DuplicateClass');
    javaaddpath('C:\Users\cathe\Documents\CS523\infodynamics-dist-1.4\infodynamics.jar');
    % Add utilities to the path
    addpath('C:\Users\cathe\Documents\CS523\infodynamics-dist-1.4\demos\octave');
    % 0. Load/prepare the data:
    source = octaveToJavaDoubleArray(v1);
    destination = octaveToJavaDoubleArray(v2);

    % 1. Construct the calculator:
    calc = javaObject('infodynamics.measures.continuous.gaussian.TransferEntropyCalculatorGaussian');
    % 2. Set any properties to non-default values:
    calc.setProperty('k_HISTORY', int2str(k));
    % 3. Initialise the calculator for (re-)use:
    calc.initialise();
    % 4. Supply the sample data:
    calc.setObservations(source, destination);
    % 5. Compute the estimate:
    result = calc.computeAverageLocalOfObservations();

    %fprintf('TE_Gaussian(col_2 -> col_0) = %.4f nats\n', ...
    %    result);
end
